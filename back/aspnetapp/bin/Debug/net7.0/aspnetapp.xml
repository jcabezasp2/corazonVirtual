<?xml version="1.0"?>
<doc>
    <assembly>
        <name>aspnetapp</name>
    </assembly>
    <members>
        <member name="M:aspnetapp.Controllers.ImagesController.PostImage(aspnetapp.Models.Image)">
             <summary>
             Upload an image
             </summary>
             <remarks>
             Sample request:
            
                 POST /images
            
             </remarks>
             <returns>Route of uploaded image</returns>
             <response code="200">Returns the image route</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is a connection failure with the database </response>
        </member>
        <member name="M:aspnetapp.Controllers.ImagesController.GetImage(System.String)">
             <summary>
             Get an image
             </summary>
             <remarks>
             Sample request:
            
                 GET /images/{id}
            
             </remarks>
             <returns>Image</returns>
             <response code="200">Returns the image</response>
             <response code="404">If the image is not found</response>
        </member>
        <member name="M:aspnetapp.Controllers.ImagesController.PostImageBase64(aspnetapp.Models.Image64)">
             <summary>
             Upload an image with a base64 string
             </summary>
             <remarks>
             Sample request:
            
                 POST /images/base64
                 {
                    "Img": "base64 string"
                 }
            
             </remarks>
             <returns>Route of uploaded image</returns>
             <response code="200">Returns the image route</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is a connection failure with the database </response>
        </member>
        <member name="M:aspnetapp.Controllers.ImagesController.PostImageBase64Fbx(aspnetapp.Models.Image64)">
             <summary>
             POST a fbx with a base64 string
             </summary>
             <remarks>
             Sample request:
            
                 POST /images/base64fbx
                 {
                    "Img": "base64 string"
                 }
            
             </remarks>
             <returns>Route of uploaded image</returns>
             <response code="200">Returns the image route</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is a connection failure with the database </response>
        </member>
        <member name="M:aspnetapp.Controllers.ImagesController.DeleteImage(System.String)">
             <summary>
             DELETE a image
             </summary>
             <remarks>
             Sample request:
            
                 DELETE /images/{id}
            
            
             </remarks>
             <returns>Route of uploaded image</returns>
             <response code="200">Returns the image route</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is a connection failure with the database </response>
        </member>
        <member name="M:aspnetapp.Controllers.PracticeController.GetPractices">
             <summary>
             Get all practices
             </summary>
             <remarks>
             Sample request:
            
                 GET /practicas
            
             </remarks>
             <returns>An array with all the practices</returns>
             <response code="200">Returns the practices</response>
             <response code="401">Unauthorized</response>
             <response code="403">Forbidden</response>
             <response code="500">Internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.PracticeController.PostPractice(System.Int32,System.Int32)">
             <summary>
             Create a practice
             </summary>
             <param name="practice"></param>
             <remarks>
             Sample request:
            
                 POST /practicas
                 {
                    "ProcedureId": 1,
                    "StepId": 1
                 }
            
             </remarks>
             <returns>The practice saved</returns>
             <response code="201">Returns the practice saved</response>
             <response code="400">Bad request</response>
             <response code="401">Unauthorized</response>
             <response code="403">Forbidden</response>
             <response code="500">Internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.PracticeController.PutPractice(System.Int32,System.Boolean)">
             <summary>
             Change the practice
             </summary>
             <param name="id"></param>
             <param name="practice"></param>
             <remarks>
             Sample request:
            
                 PUT /practicas/1
                 {
                    "IsFinished": true
                 }
            
             </remarks>
             <returns>The practice updated</returns>
             <response code="200">Returns the practice updated</response>
             <response code="400">Bad request</response>
             <response code="401">Unauthorized</response>
             <response code="403">Forbidden</response>
             <response code="404">Not found</response>
             <response code="500">Internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.PracticeController.AddObservationToPractice(System.Int32,System.String)">
             <summary>
             Add an observation to the practice
             </summary>
             <param name="id"></param>
             <param name="observation"></param>
             <remarks>
             Sample request:
            
                 PUT /practicas/1/observation
                 {
                    "observation": "Observations"
                 }
            
             </remarks>
             <returns>The practice updated</returns>
             <response code="200">Returns the practice updated</response>
             <response code="400">Bad request</response>
             <response code="401">Unauthorized</response>
             <response code="403">Forbidden</response>
             <response code="404">Not found</response>
             <response code="500">Internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.PracticeController.DeletePractice(System.Int32)">
             <summary>
             Finish the practice
             </summary>
             <param name="id"></param>
             <remarks>
             Sample request:
            
                 PUT /practicas/1/finish
            
             </remarks>
             <returns>The practice updated</returns>
             <response code="200">Returns the practice updated</response>
             <response code="400">Bad request</response>
             <response code="401">Unauthorized</response>
             <response code="403">Forbidden</response>
             <response code="404">Not found</response>
             <response code="500">Internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.ProceduresController.GetProcedures">
             <summary>
             Get all procedures
             </summary>
             <remarks>
             Sample request:
            
                 GET /procedimientos
            
             </remarks>
             <returns>Array of procedures</returns>
             <response code="200">Returns the array of procedures</response>
             <response code="404">If the procedures array is null</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is a connection failure with the database </response>
        </member>
        <member name="M:aspnetapp.Controllers.ProceduresController.GetProcedure(System.Int32)">
             <summary>
             Get a procedure by id
             </summary>
             <remarks>
             Sample request:
            
                 GET /procedimientos/1
            
             </remarks>
             <param name="id"></param>
             <returns>A procedure</returns>
             <response code="200">Returns the procedure</response>
             <response code="404">If the procedure is null</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is a connection failure with the database </response>
        </member>
        <member name="M:aspnetapp.Controllers.ProceduresController.PutProcedure(System.Int32,aspnetapp.Models.Procedure)">
             <summary>
             Update a procedure
             </summary>
             <remarks>
             Sample request:
            
                 PUT /procedimientos/1
                 {
                    "name": "string",
                    "image": "string"
                 }
            
             </remarks>
             <param name="id"></param>
             <param name="procedure"></param>
             <returns>Nothing</returns>
             <response code="200">Ok</response>
             <response code="400">If the id is not equal to the procedure id</response>
             <response code="404">If the procedure is null</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is a connection failure with the database </response>
        </member>
        <member name="M:aspnetapp.Controllers.ProceduresController.PostProcedure(aspnetapp.Models.ProcedureRequest)">
             <summary>
             Create a procedure
             </summary>
             <remarks>
             Sample request:
            
                 POST /procedimientos
                 {
                    "name": "string",
                    "image": "string",
                    "steps": [1,2,3]
                 }
            
             </remarks>
             <param name="procedure"></param>
             <returns>A procedure</returns>
             <response code="201">Returns the procedure</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is a connection failure with the database </response>
        </member>
        <member name="M:aspnetapp.Controllers.ProceduresController.DeleteProcedure(System.Int32)">
             <summary>
             Delete a procedure
             </summary>
             <remarks>
             Sample request:
            
                 DELETE /procedimientos/1
            
             </remarks>
             <param name="id"></param>
             <returns>Nothing</returns>
             <response code="204">Success</response>
             <response code="404">If the procedure is null</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is a connection failure with the database </response>
        </member>
        <member name="M:aspnetapp.Controllers.ProceduresController.GetProcedureSteps(System.Int32)">
             <summary>
             Get all steps of a procedure
             </summary>
             <remarks>
             Sample request:
            
                 GET /procedimientos/1/pasos
            
             </remarks>
             <param name="id"></param>
             <returns>Array of steps</returns>
             <response code="200">Returns the array of steps</response>
             <response code="404">If the procedure is null</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is a connection failure with the database </response>
        </member>
        <member name="M:aspnetapp.Controllers.ProceduresController.PostProcedureStep(System.Int32,System.Int32[])">
             <summary>
             Add steps to a procedure
             </summary>
             <remarks>
             Sample request:
            
                 POST /procedimientos/1/pasos
               [
                  0,1,2
               ]
            
             </remarks>
             <param name="id"></param>
             <param name="stepIds"></param>
             <returns>Nothing</returns>
             <response code="200">Returns nothing</response>
             <response code="404">If the procedure or the steps are null</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is a connection failure with the database </response>
        </member>
        <member name="M:aspnetapp.Controllers.RoleController.Create(aspnetapp.Models.Role)">
             <summary>
             Create a role
             </summary>
             <remarks>
             Sample request:
            
                 POST /roles/create
                 {
                    "name": "admin"
                 }
            
             </remarks>
             <param name="role"></param>
             <returns>Ok</returns>
             <response code="200">Returns Ok</response>
             <response code="400">If the role is null</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is an internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.RoleController.Delete(aspnetapp.Models.Role)">
             <summary>
             Delete a role
             </summary>
             <remarks>
             Sample request:
            
                 POST /roles/delete
                 {
                    "name": "admin"
                 }
            
             </remarks>
             <param name="role"></param>
             <returns>Ok</returns>
             <response code="200">Returns Ok</response>
             <response code="400">If the role is null</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is an internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.RoleController.AddUserToRole(aspnetapp.Models.UserRole)">
             <summary>
             Add a user to a role
             </summary>
             <remarks>
             Sample request:
            
                 POST /roles/adduser
                 {
                    "userEmail": "admin@admin",
                    "roleName": "admin"
                 }
            
             </remarks>
             <param name="userRole"></param>
             <returns>Ok</returns>
             <response code="200">Returns Ok</response>
             <response code="400">If the user or role is null</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is an internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.RoleController.AddPermissionToRole(aspnetapp.Models.AddClaimToRole)">
             <summary>
             add permission to a role
             </summary>
             <remarks>
             Sample request:
            
                 POST /rol/addPermission
                 {
                    "roleId": "admin",
                    "type": "permission",
                    "value": "value"
                 }
            
             </remarks>
             <param name="permission"></param>
             <returns>Ok</returns>
             <response code="200">Returns Ok</response>
             <response code="400">If the role is null</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is an internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.RoleController.GetAll">
             <summary>
             Get all roles
             </summary>
             <remarks>
             Sample request:
            
                 GET /roles/getAll
            
             </remarks>
             <returns>Ok</returns>
             <response code="200">Returns Ok</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is an internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.RoleController.GetAllClaims">
             <summary>
             Get all claims
             </summary>
             <remarks>
             Sample request:
            
                 GET /roles/getAllClaims
            
             </remarks>
             <returns>Ok</returns>
             <response code="200">Returns Ok</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is an internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.StepsController.GetSteps">
             <summary>
             Get all steps
             </summary>
             <remarks>
             Sample request:
            
                 GET /pasos
            
             </remarks>
             <returns>Array of steps</returns>
             <response code="200">Returns the array of steps</response>
             <response code="404">If the array of steps is null</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is an internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.StepsController.GetStep(System.Int32)">
             <summary>
             Get a step by id
             </summary>
             <remarks>
             Sample request:
            
                 GET /pasos/1
            
             </remarks>
             <param name="id"></param>
             <returns>A step</returns>
             <response code="200">Returns the step</response>
             <response code="404">If the step is null</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is an internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.StepsController.PutStep(System.Int32,aspnetapp.Models.StepRequest)">
             <summary>
             Update a step
             </summary>
             <remarks>
             Sample request:
            
                 PUT /pasos/1
                 {
                    "name": "Step 1",
                    "description": "Description of step 1",
                    "image": file,
                    "duration": "10"
                 }
            
             </remarks>
             <param name="id"></param>
             <param name="step"></param>
             <returns>Nothing</returns>
             <response code="200">Ok</response>
             <response code="400">If the id is not equal to the step id</response>
             <response code="404">If the step is null</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is an internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.StepsController.PostStep(aspnetapp.Models.StepRequest)">
             <summary>
             Create a step
             </summary>
             <remarks>
             Sample request:
            
                 POST /pasos
                 {
                    "name": "Step 1",
                    "description": "Description of step 1",
                    "image": file,
                    "duration": "10"
                    "previousStep": true
                 }
             
             </remarks>
             <param name="step"></param>
             <returns>A newly created step</returns>
             <response code="201">Returns the newly created step</response>
             <response code="400">If the step is null</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is an internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.StepsController.DeleteStep(System.Int32)">
             <summary>
             Delete a step
             </summary>
             <remarks>
             Sample request:
            
                 DELETE /pasos/1
            
             </remarks>
             <param name="id"></param>
             <returns>Nothing</returns>
             <response code="200">Sucess</response>
             <response code="404">If the step is null</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is an internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.StepsController.AddToolToStep(System.Int32,System.Int32)">
             <summary>
             Add tools to a step
             </summary>
             <remarks>
             Sample request:
            
                 POST /pasos/1/herramientas
                 [
                   1
                 ]
            
             </remarks>
             <param name="id"></param>
             <param name="toolId"></param>      
             <returns>Nothing</returns>
             <response code="200">Ok</response>
             <response code="400">If the id is not equal to the step id</response>
             <response code="404">If the step or the tool is null</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is an internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.ToolsController.GetTools">
             <summary>
             Get all tools
             </summary>
             <remarks>
             Sample request:
            
                 GET /herramientas
            
             </remarks>
             <returns>Array of tools</returns>
             <response code="200">Returns the array of tools</response>
             <response code="404">If the array of tools is null</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is an internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.ToolsController.GetTool(System.Int32)">
             <summary>
             Get a tool by id
             </summary>
             <remarks>
             Sample request:
            
                 GET /herramientas/1
            
             </remarks>
             <param name="id"></param>
             <returns>A tool</returns>
             <response code="200">Returns the tool</response>
             <response code="404">If the tool is null</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is an internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.ToolsController.PutTool(System.Int32,aspnetapp.Models.Tool)">
             <summary>
             Update a tool 
             </summary>
             <remarks>
             Sample request:
            
                 PUT /herramientas/1
                  {
                    "name": "Tool 1",
                    "description": "Description of tool 1",
                    "modelo": "file"
                    "OptimalScale": 0.1
                 }
            
             </remarks>
             <param name="id"></param>
             <param name="tool"></param>
             <returns>Nothing</returns>
             <response code="200">Ok</response>
             <response code="400">If the id is not equal to the tool id</response>
             <response code="404">If the tool is null</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is an internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.ToolsController.PostTool(aspnetapp.Models.Tool)">
             <summary>
             Create a tool 
             </summary>
             <remarks>
             Sample request:
            
                 POST /herramientas
                 {
                    "name": "Tool 1",
                    "description": "Description of tool 1",
                    "modelo": file,
                    "OptimalScale": 0.1
                 }
             
             </remarks>
             <param name="tool"></param>
             <returns>A newly created tool</returns>
             <response code="201">Returns the newly created tool</response>
             <response code="400">If the tool is null</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is an internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.ToolsController.DeleteTool(System.Int32)">
             <summary>
             Delete a tool
             </summary>
             <remarks>
             Sample request:
            
                 DELETE /herramientas/1
            
             </remarks>
             <param name="id"></param>
             <returns>Nothing</returns>
             <response code="200">Sucess</response>
             <response code="404">If the tool is null</response>
             <response code="401">If the user is not authenticated</response>
             <response code="500">If there is an internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.UsersController.Register(aspnetapp.Models.User)">
             <summary>
             Register an user
             </summary>
             <remarks>
             Sample request:
            
                 POST /usuarios/registrar
                 {
                    "name": "user",
                    "email": "user@example",
                    "password": "123456"
                 }
            
            </remarks>
             <returns>The user data and the ApiKey</returns>
             <response code="200">Returns the user data and the ApiKey</response>
             <response code="400">If the user data is not valid</response>
        </member>
        <member name="M:aspnetapp.Controllers.UsersController.GetAll">
             <summary>
             Return all users
             </summary>
             <remarks>
             Sample request:
            
                 GET /usuarios/getAll
            
            </remarks>
             <returns>All users</returns>
             <response code="200">Returns all users</response>
             <response code="401">If the user is not authenticated</response>
        </member>
        <member name="M:aspnetapp.Controllers.UsersController.GetUserData">
             <summary>
             Return the user data and the ApiKey
             </summary>
             <remarks>
             Sample request:
            
                 POST /usuarios/getUsuario
             
            </remarks>
             <returns>The user data and the ApiKey</returns>
             <response code="200">Returns the user data and the ApiKey</response>
             <response code="401">If the user is not authenticated</response>
        </member>
        <member name="M:aspnetapp.Controllers.UsersController.CreateBearerToken(aspnetapp.Models.AuthenticationRequest)">
             <summary>
             Login a user and return the user data and the Token
             </summary>
             <remarks>
             Sample request:
            
                 POST /usuarios/login
                 {
                    "email": "user@example",
                    "password": "123456"
                 }
            </remarks>
             <returns>The token and the expiration date</returns>
        </member>
        <member name="M:aspnetapp.Controllers.UsersController.CreateApiKey(aspnetapp.Models.AuthenticationRequest)">
             <summary>
             Login a user and return the user data and the ApiKey
             </summary>
             <remarks>
             Sample request:
            
                 POST /usuarios/login
                 {
                    "email": "user@example",
                    "password": "123456"
                 }
            </remarks>
             <returns>The user data and the ApiKey</returns>
             <response code="200">Returns the user data and the ApiKey</response>
             <response code="400">Error in the request</response>
             <response code="404">If the user is not found</response>
             <response code="401">If the user is not authenticated</response>
        </member>
        <member name="M:aspnetapp.Controllers.UsersController.AddClaimToUSer(aspnetapp.Models.AddClaimToUSer)">
             <summary>
             Add a claim to a user
             </summary>
             <remarks>
             Sample request:
            
                 POST /usuarios/addClaim
                 {
                    "userId": "e046c7d5-4a8a-4ad8-a53b-930bde50339a",
                    "type": "type",
                    "value": "value"
                 }
            </remarks>
             <returns>Ok</returns>
             <response code="200">Returns Ok</response>
             <response code="400">If the user is null or the password is invalid</response>
        </member>
        <member name="M:aspnetapp.Controllers.UsersController.UpdateUser(System.String,aspnetapp.Models.User)">
             <summary>
             uptade the user data
             </summary>
             <remarks>
             Sample request:
            
                 PUT /usuarios/1
                 {
                    "id": "e046c7d5-4a8a-4ad8-a53b-930bde50339a",
                    "name": "name",
                    "email": "email",
                    "password": "password",
                 }
            </remarks>
             <param name="id"></param>
             <param name="user"></param>
             <returns>Ok</returns>
             <response code="200">Returns Ok</response>
             <response code="400">If the user is null or the password is invalid</response>
             <response code="401">If the user is not authenticated</response>
        </member>
        <member name="M:aspnetapp.Controllers.UsersController.GetPractice(System.String)">
             <summary>
             Get a practices by student id
             </summary>
             <param name="id"></param>
             <remarks>
             Sample request:
            
                 GET usuarios/3/practicas/
            
             </remarks>
             <returns>An array with all the practices of the student</returns>
             <response code="200">Returns the practices</response>
             <response code="401">Unauthorized</response>
             <response code="403">Forbidden</response>
             <response code="500">Internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.UsersController.GetStudents">
             <summary>
             Get all students
             </summary>
             <remarks>
             Sample request:
            
                 GET usuarios/students
            
             </remarks>
             <returns>An array with all the students</returns>
             <response code="200">Returns the students</response>
             <response code="401">Unauthorized</response>
             <response code="403">Forbidden</response>
             <response code="500">Internal server error</response>
        </member>
        <member name="M:aspnetapp.Controllers.UsersController.LockUnlockUser(System.String)">
             <summary>
             Lock or unlock a user
             </summary>
             <remarks>
             Sample request:
            
                 POST usuarios/lockUnlock
                 "id"
            
             </remarks>
             <returns>Ok</returns>
             <response code="200">Returns Ok</response>
             <response code="400">If the user is null or with ADMIN role</response>
             <response code="401">Unauthorized</response>
             <response code="500">Internal server error</response>
        </member>
        <member name="T:aspnetapp.Migrations._1">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._1.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._1.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._1.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:aspnetapp.Migrations._2">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._2.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._2.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._2.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:aspnetapp.Migrations._3">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._3.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._3.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._3.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:aspnetapp.Migrations._4">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._4.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._4.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._4.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:aspnetapp.Migrations._5">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._5.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._5.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._5.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:aspnetapp.Migrations._6">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._6.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc /> 
        </member>
        <member name="M:aspnetapp.Migrations._6.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._6.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:aspnetapp.Migrations._7">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._7.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._7.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._7.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:aspnetapp.Migrations._8">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._8.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._8.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._8.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:aspnetapp.Migrations._9">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._9.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._9.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._9.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:aspnetapp.Migrations._10">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._10.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._10.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._10.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:aspnetapp.Migrations._11">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._11.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._11.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._11.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:aspnetapp.Migrations._12">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._12.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._12.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._12.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:aspnetapp.Migrations._13">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._13.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._13.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._13.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:aspnetapp.Migrations._14">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._14.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._14.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._14.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:aspnetapp.Migrations._15">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._15.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._15.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:aspnetapp.Migrations._15.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
    </members>
</doc>
